opentelemetry-collector:
  # Valid values are "daemonset", "deployment", and "statefulset".
  mode: "deployment"

  image:
    # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
    repository: "otel/opentelemetry-collector-contrib"
  config:
    exporters:
      debug: {}
    extensions:
      # The health_check extension is mandatory for this chart.
      # Without the health_check extension the collector will fail the readiness and liveliness probes.
      # The health_check extension can be modified, but should never be removed.
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
      memory_ballast: {}
    processors:
      batch: {}
      # If set to null, will be overridden with values based on k8s resource limits
      memory_limiter: null
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
      zipkin:
        endpoint: ${env:MY_POD_IP}:9411
    service:
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
      extensions:
        - health_check
        - memory_ballast
      pipelines:
        logs:
          exporters:
            - debug
          processors:
            - memory_limiter
            - batch
          receivers:
            - otlp
        metrics:
          exporters:
            - debug
          processors:
            - memory_limiter
            - batch
          receivers:
            - otlp
            - prometheus
        traces:
          exporters:
            - debug
          processors:
            - memory_limiter
            - batch
          receivers:
            - otlp
            - jaeger
            - zipkin

security:
  password: "changeme"
  networkPolicy:
    enabled: false
    from: []
  allowlist:
    enabled: false
    ip: "0.0.0.0/0"

networking:
  type: ClusterIP
  clusterIP: None
  service:
    port: 8088
  user:
    enabled: false
    port: 5000

ingress:
  enabled: false
  tls: true
  ingressClassName: ""
  annotations:
    []
    # kubernetes.io/tls-acme: "true"
  hostname: chart-example.local
  userHostname: chart-example-user.local
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  useCertManager: false
  certManagerClusterIssuer: ""

route:
  enabled: false
  annotations:
    []
    # route.openshift.io/termination: "reencrypt"
  hostname: chart-example.local
  userHostname: chart-example-user.local
  tls:
    termination: edge
    # key:
    # certificate:
    # caCertificate:
    # destinationCACertificate:
  wildcardPolicy: None

userPreferences:
  language: "en"
